// Generated by Dagger (https://dagger.dev).
package com.example.hingeproject.user_feed.repository;

import com.example.hingeproject.user_feed.repository.source.UserFeedDAO;
import com.example.hingeproject.user_feed.repository.source.UserFeedService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UserRepository_Factory implements Factory<UserRepository> {
  private final Provider<UserFeedService> userFeedServiceProvider;

  private final Provider<UserFeedDAO> userFeedDaoProvider;

  public UserRepository_Factory(Provider<UserFeedService> userFeedServiceProvider,
      Provider<UserFeedDAO> userFeedDaoProvider) {
    this.userFeedServiceProvider = userFeedServiceProvider;
    this.userFeedDaoProvider = userFeedDaoProvider;
  }

  @Override
  public UserRepository get() {
    return newInstance(userFeedServiceProvider.get(), userFeedDaoProvider.get());
  }

  public static UserRepository_Factory create(Provider<UserFeedService> userFeedServiceProvider,
      Provider<UserFeedDAO> userFeedDaoProvider) {
    return new UserRepository_Factory(userFeedServiceProvider, userFeedDaoProvider);
  }

  public static UserRepository newInstance(UserFeedService userFeedService,
      UserFeedDAO userFeedDao) {
    return new UserRepository(userFeedService, userFeedDao);
  }
}
